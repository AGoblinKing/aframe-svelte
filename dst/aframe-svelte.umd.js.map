{"version":3,"file":"aframe-svelte.umd.js","sources":["../src/aframe-svelte.ts"],"sourcesContent":["const SVELTE_CACHE = {}\r\nconst SVELTE_GATHER = {}\r\n\r\nexport function registerSvelte(key: string, svelte) {\r\n\tSVELTE_CACHE[key] = svelte\r\n}\r\n\r\nexport function registerGather(key: string, gather: () => any) {\r\n\tSVELTE_GATHER[key] = gather\r\n}\r\n\r\nAFRAME.registerComponent('svelte', {\r\n\tmultiple: true,\r\n\tschema: {\r\n\t\tprops: {\r\n\t\t\t// pass props to svelte component\r\n\t\t\tdefault: {},\r\n\t\t\tparse(value) {\r\n\t\t\t\tswitch (typeof value) {\r\n\t\t\t\t\tcase 'string':\r\n\t\t\t\t\t\treturn JSON.parse(value)\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn value\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tserialize(value) {\r\n\t\t\t\treturn JSON.stringify(value)\r\n\t\t\t},\r\n\t\t},\r\n\t\t// the svelte component\r\n\t\tcomponent: {\r\n\t\t\tparse(value) {\r\n\t\t\t\treturn SVELTE_CACHE[value]\r\n\t\t\t},\r\n\t\t\tserialize(value) {\r\n\t\t\t\treturn value.name\r\n\t\t\t},\r\n\t\t},\r\n\t\t// fn to run to gather props\r\n\t\tgather: {\r\n\t\t\tparse(value) {\r\n\t\t\t\treturn SVELTE_GATHER[value]\r\n\t\t\t},\r\n\t\t\tserialize(value) {\r\n\t\t\t\treturn value.name\r\n\t\t\t},\r\n\t\t\tdefault: function () {\r\n\t\t\t\treturn this.data.props\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tupdate() {\r\n\t\tthis.remove()\r\n\t\tif (this.data.component) {\r\n\t\t\t// let parent nodes/etc settle\r\n\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\tthis.svelte = new this.data.component({\r\n\t\t\t\t\ttarget: this.el,\r\n\t\t\t\t\tprops: this.data.gather.call(this),\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t},\r\n\tremove() {\r\n\t\tif (this.svelte) {\r\n\t\t\tthis.svelte.$destroy()\r\n\t\t\tdelete this.svelte\r\n\t\t}\r\n\t},\r\n})\r\n"],"names":["AFRAME"],"mappings":"sPAAA,gBAWAA"}